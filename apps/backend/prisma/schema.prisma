generator client {
  provider = "prisma-client-js"
  //  output = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
    userName      String  @unique @id
    githubId  Int  @unique
    files File[]
}

model File {
    id        String      @id @default(uuid())
    ownerName String
    fileName  String
    createdAt DateTime    @default(now())
    owner     User       @relation(fields: [ownerName], references: [userName], onDelete: Cascade)
    snapshots Snapshot[]
    @@unique([ownerName, fileName])
    @@index([ownerName, fileName])
}

model Snapshot {
    id        String   @id @default(uuid())
    fileId    String
    ownerName String
    fileName  String
    version   Int
    isPublic  Boolean
    license   String @default("MIT")
    createdAt DateTime @default(now())
    file      File    @relation(fields: [fileId], references: [id], onDelete: Cascade)
    dependTo  Snapshot[] @relation("dependencies")
    dependBy  Snapshot[] @relation("dependencies")
    tags      Tag[] @relation("tagSnaps")
    registeredAt DateTime @default(now())
    description String @db.Text @default("")
    content  Content?
    @@unique([ownerName, fileName, version])
    @@index([ownerName, fileName, version])
}


model Content {
    snapshotId String @id
    content String  @db.Text
    snapshot Snapshot @relation(fields: [snapshotId], references: [id])
}


model Tag {
    id       String @id @default(uuid())
    name      String
    snapshots Snapshot[] @relation("tagSnaps")
    createdAt DateTime @default(now())
    @@unique([name])
}


model Session {
  sessionId    String   @id @default(uuid())
  value        String

  @@unique([sessionId])
}

model State {
  id        String   @id @default(uuid())
  state     String
  createdAt DateTime @default(now())
}